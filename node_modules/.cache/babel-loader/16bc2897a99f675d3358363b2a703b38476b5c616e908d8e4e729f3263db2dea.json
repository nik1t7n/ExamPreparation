{"ast":null,"code":"var _jsxFileName = \"/Users/nik1t7n/Desktop/again/my-tailwind-app/src/pages/InfoPage/InfoPage.tsx\";\nimport React from \"react\";\nimport AreaCard from \"../../components/info/AreaCard\";\nimport { areas } from \"../../data/Areas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = [\"bg-blue-200\", \"bg-green-200\", \"bg-yellow-200\", \"bg-purple-200\", \"bg-pink-200\", \"bg-indigo-200\"];\nconst InfoPage = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto px-4 py-8 h-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-[80vh] overflow-y-auto rounded-lg border border-gray-300 shadow-md\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\",\n        children: areas.map((area, index) => {\n          // Используем остаток от деления на длину массива цветов для выбора по порядку\n          const colorIndex = index % colors.length;\n          return /*#__PURE__*/_jsxDEV(AreaCard, {\n            category: area.category,\n            name: area.name,\n            fgp: area.fgp,\n            relief: area.relief,\n            climate: area.climate,\n            internalWaters: area.internalWaters,\n            soils: area.soils,\n            landscape: area.landscape,\n            vegetation: area.vegetation,\n            fauna: area.fauna,\n            bg_color: colors[colorIndex] // Передаем цвет по порядку\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_c = InfoPage;\nexport default InfoPage;\nvar _c;\n$RefreshReg$(_c, \"InfoPage\");","map":{"version":3,"names":["React","AreaCard","areas","jsxDEV","_jsxDEV","colors","InfoPage","className","children","map","area","index","colorIndex","length","category","name","fgp","relief","climate","internalWaters","soils","landscape","vegetation","fauna","bg_color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nik1t7n/Desktop/again/my-tailwind-app/src/pages/InfoPage/InfoPage.tsx"],"sourcesContent":["import React from \"react\";\nimport AreaCard from \"../../components/info/AreaCard\";\nimport { areas } from \"../../data/Areas\";\n\nconst colors = [\"bg-blue-200\", \"bg-green-200\", \"bg-yellow-200\", \"bg-purple-200\", \"bg-pink-200\", \"bg-indigo-200\"];\n\nconst InfoPage = () => {\n  return (\n    <div className=\"container mx-auto px-4 py-8 h-screen\">\n      <div className=\"h-[80vh] overflow-y-auto rounded-lg border border-gray-300 shadow-md\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\">\n          {areas.map((area, index) => {\n            // Используем остаток от деления на длину массива цветов для выбора по порядку\n            const colorIndex = index % colors.length;\n            return (\n              <AreaCard\n                key={index}\n                category={area.category}\n                name={area.name}\n                fgp={area.fgp}\n                relief={area.relief}\n                climate={area.climate}\n                internalWaters={area.internalWaters}\n                soils={area.soils}\n                landscape={area.landscape}\n                vegetation={area.vegetation}\n                fauna={area.fauna}\n                bg_color={colors[colorIndex]} // Передаем цвет по порядку\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InfoPage;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,SAASC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,MAAM,GAAG,CAAC,aAAa,EAAE,cAAc,EAAE,eAAe,EAAE,eAAe,EAAE,aAAa,EAAE,eAAe,CAAC;AAEhH,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,oBACEF,OAAA;IAAKG,SAAS,EAAC,sCAAsC;IAAAC,QAAA,eACnDJ,OAAA;MAAKG,SAAS,EAAC,sEAAsE;MAAAC,QAAA,eACnFJ,OAAA;QAAKG,SAAS,EAAC,0DAA0D;QAAAC,QAAA,EACtEN,KAAK,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;UAC1B;UACA,MAAMC,UAAU,GAAGD,KAAK,GAAGN,MAAM,CAACQ,MAAM;UACxC,oBACET,OAAA,CAACH,QAAQ;YAEPa,QAAQ,EAAEJ,IAAI,CAACI,QAAS;YACxBC,IAAI,EAAEL,IAAI,CAACK,IAAK;YAChBC,GAAG,EAAEN,IAAI,CAACM,GAAI;YACdC,MAAM,EAAEP,IAAI,CAACO,MAAO;YACpBC,OAAO,EAAER,IAAI,CAACQ,OAAQ;YACtBC,cAAc,EAAET,IAAI,CAACS,cAAe;YACpCC,KAAK,EAAEV,IAAI,CAACU,KAAM;YAClBC,SAAS,EAAEX,IAAI,CAACW,SAAU;YAC1BC,UAAU,EAAEZ,IAAI,CAACY,UAAW;YAC5BC,KAAK,EAAEb,IAAI,CAACa,KAAM;YAClBC,QAAQ,EAAEnB,MAAM,CAACO,UAAU,CAAE,CAAC;UAAA,GAXzBD,KAAK;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAYX,CAAC;QAEN,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACC,EAAA,GA7BIvB,QAAQ;AA+Bd,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}